#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<ctype.h>
#define MAX 100
int stk[MAX];
int top = -1;
void push(char stk[] , char);
char pop(char stk[]);
void infixtopostfix(char source[],char target[]);
int getpriority(char);
int main()
{
	char  infix[100],postfix[100];
	puts("enter any expression\n");
	gets(infix);
    strcpy(postfix,"");
    infixtopostfix(infix,postfix);
    printf("\n the postfix expression : \t");
    puts(postfix);
	return 0;
}

void infixtopostfix(char source[],char target[])
{
	int i = 0,j = 0;
	char temp;
	strcpy(target,"");
	while(source[i] != 0)
	{
		if (source[i]=='(' )
		{
			push(stk,source[i]);
			i++;
		}
		
		else if(source[i] == ')')
		{  
		
		while((top != -1) && (stk[top] != '('))
		{
				target[j] = pop(stk);
			j++;
		}
		if(top == -1)
		{
			printf("\n invalid expression");
			exit(0);
		}
		
		temp = pop(stk);
		i++;
	 }
 	
 	else if(isdigit(source[i]) || isalpha(source[i]))
 	{
 		target[j] = source[i];
 		j++;
 		i++;
	 }
	else if(source[i] == '+'|| source[i]== '-' || source[i] == '*' || source[i] =='/' || source[i] == '%' )
	{
		while((top!= -1) && (stk[top] != '(') && (getpriority(stk[top]) > getpriority(source[i])))
		{
			target[j]  = pop(stk);
			j++;
		}
		
		push(stk,source[i]);
		
		i++;
	}
	
	else{
		printf("\n incorrect element");
		exit(1);
		
	}
  }
	
	while((top != -1) && (stk[top] != '('))
	{
		target[j] = pop(stk);
		j++;
	}
	
	target[j] = '\0';
	}
	
	int getpriority(char op)
	{
		if(op == '/' )
	 
		return 5;
		
		if(	 op == '*' )
		return 4;
		
		if( op == '%')
		return 3;
		if( op == '+')
		return 2;
		else if (op == '+' || op == '-')
		return 1;
	
	}
void push(char stk[] , char val)
{
	if(top == MAX -1)
	  printf("\n stack overflow");
	  else
	  {
	  	top ++;
	  	stk[top]= val;
	  }
	}	
	
	char pop(char stk[])
{
	char val = ' ';
	if(top == -1)
	printf("\n stack underflow");
	else{
		val =stk[top];
		top--;
	}
	
	return val;
}
